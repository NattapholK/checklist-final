from flask import Flask, request, render_template, jsonify
from datetime import datetime
from zoneinfo import ZoneInfo
import firebase_admin
from firebase_admin import credentials, firestore
import os
from dotenv import load_dotenv
import requests
import base64
import json
import atexit # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î Scheduler ‡∏ï‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤
from apscheduler.schedulers.background import BackgroundScheduler

from student import students

# ====== 1. ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° ======
load_dotenv()
LINE_ACCESS_TOKEN = os.getenv("LINE_ACCESS_TOKEN")
FIREBASE_SERVICE_BASE64 = os.getenv("FIREBASE_SERVICE")
# ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ CRON_SECRET_KEY ‡πÅ‡∏•‡πâ‡∏ß

# ====== 2. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ======
try:
    if not firebase_admin._apps:
        firebase_key_dict = json.loads(base64.b64decode(FIREBASE_SERVICE_BASE64))
        cred = credentials.Certificate(firebase_key_dict)
        firebase_admin.initialize_app(cred)
    db = firestore.client()
    print("‚úÖ Firebase initialized successfully.")
except Exception as e:
    print(f"üî• Firebase initialization error: {e}")

# ====== 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Flask App ======
app = Flask(__name__)

# ====== 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á LINE (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ======

def reply_text(reply_token, text):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (Reply)"""
    headers = {"Authorization": f"Bearer {LINE_ACCESS_TOKEN}", "Content-Type": "application/json"}
    payload = {"replyToken": reply_token, "messages": [{"type": "text", "text": text}]}
    try:
        r = requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=payload)
        r.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"üî• Reply error: {e.response.text}")

def send_line_broadcast_to_all(message):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° (Broadcast)"""
    print("Attempting to send broadcast message...")
    headers = {"Authorization": f"Bearer {LINE_ACCESS_TOKEN}", "Content-Type": "application/json"}
    broadcast_url = "https://api.line.me/v2/bot/message/broadcast"
    payload = {"messages": [{"type": "text", "text": message}]}
    
    try:
        r = requests.post(broadcast_url, headers=headers, json=payload)
        r.raise_for_status()
        print("‚úÖ Broadcast message sent to LINE API successfully.")
    except requests.exceptions.RequestException as e:
        print(f"üî• LINE Broadcast API error: {e}")
        if e.response:
            print(f"Response status: {e.response.status_code}, body: {e.response.text}")

# ====== 5. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ======

def generate_and_send_report():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô LINE"""
    # ‡πÉ‡∏ä‡πâ with app.app_context() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Flask ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô Thread ‡πÅ‡∏¢‡∏Å
    with app.app_context():
        now_bkk = datetime.now(ZoneInfo("Asia/Bangkok"))
        date_str = now_bkk.strftime("%Y-%m-%d")
        time_now = now_bkk.strftime("%H:%M")

        users_ref = db.collection("attendances").document(date_str).collection("users")
        checked_names = []
        checked_numbers = set()

        try:
            docs = users_ref.stream()
            for doc in docs:
                data = doc.to_dict()
                if data.get("number") and data.get("name"):
                    checked_numbers.add(data["number"])
                    checked_names.append(data["name"])

            absent_names = [students[i] for i in range(len(students)) if (i + 1) not in checked_numbers]
            
            report = (
                f"üìã ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n"
                f"‡∏ï‡∏±‡∏î‡∏£‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤: {time_now} ‡∏ô. ({date_str})\n\n"
                f"üü¢ ‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: {len(checked_numbers)} ‡∏Ñ‡∏ô\n"
                f"üî¥ ‡∏Ç‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: {len(absent_names)} ‡∏Ñ‡∏ô\n"
            )
            if absent_names:
                report += "\n‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏≤‡∏î:\n"
                for name in sorted(absent_names):
                    report += f"  - {name}\n"

            send_line_broadcast_to_all(report)
            print(f"üì§ Report for {date_str} sent successfully.")

        except Exception as e:
            print(f"üî• Error during report generation: {e}")
            # ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ raise e ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ scheduler ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
            
# ====== 6. ‚ú® ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (Scheduler) ======
scheduler = BackgroundScheduler(daemon=True, timezone=ZoneInfo("Asia/Bangkok"))
# ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô generate_and_send_report ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤ 8 ‡πÇ‡∏°‡∏á 30 ‡∏ô‡∏≤‡∏ó‡∏µ
scheduler.add_job(func=generate_and_send_report, trigger='cron', hour=8, minute=30)
scheduler.start()

# ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Scheduler ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏á
atexit.register(lambda: scheduler.shutdown())
print("‚úÖ Scheduler started. Report will be sent daily at 08:30 Bangkok time.")

# ====== 7. Routes ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ /trigger-report) ======

@app.route("/")
def index():
    date_list = []
    try:
        attendance_docs = db.collection("attendances").get()
        date_list = sorted([doc.id for doc in attendance_docs], reverse=True)
    except Exception as e:
        print(f"üî• Error loading dates: {e}")
    return render_template("index.html", dates=date_list, students=students)

@app.route("/report/<date_str>")
def report_detail(date_str):
    users_ref = db.collection("attendances").document(date_str).collection("users")
    docs = users_ref.stream()
    checked = []
    checked_numbers = set()
    for doc in docs:
        data = doc.to_dict()
        if data.get("number") and data.get("name"):
            checked.append(data)
            checked_numbers.add(data["number"])
    absent = [{"number": i + 1, "name": students[i]} for i in range(len(students)) if (i + 1) not in checked_numbers]
    return render_template("detail.html", date=date_str, checked=checked, absent=absent)

@app.route("/checkin", methods=["POST"])
def checkin():
    data = request.get_json()
    name, number = data.get("name"), data.get("number")
    if not name or not number: return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö"}), 400
    try: number = int(number)
    except ValueError: return jsonify({"error": "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}), 400
    if not (1 <= number <= len(students)): return jsonify({"error": "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠"}), 400
    
    date_str = datetime.now(ZoneInfo("Asia/Bangkok")).strftime("%Y-%m-%d")
    doc_ref = db.collection("attendances").document(date_str).collection("users").document(str(number))
    try:
        if doc_ref.get().exists: return jsonify({"error": "‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"}), 409
        db.collection("attendances").document(date_str).set({}, merge=True)
        doc_ref.set({"name": name, "number": number, "timestamp": firestore.SERVER_TIMESTAMP})
        return jsonify({"message": f"‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {number} - {name}"}), 200
    except Exception as e:
        print(f"üî• Checkin error: {e}")
        return jsonify({"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"}), 500

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    for event in data.get("events", []):
        if "source" not in event or "userId" not in event["source"]:
            continue
        user_id = event["source"]["userId"]
        reply_token = event.get("replyToken")

        if event["type"] == "follow":
            print(f"New follow event from user_id: {user_id}")
            db.collection("recipients").document(user_id).set({"joined_at": firestore.SERVER_TIMESTAMP})
            reply_text(reply_token, "‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞")

        elif event["type"] == "unfollow":
            print(f"Unfollow event from user_id: {user_id}")
            db.collection("recipients").document(user_id).delete()

        elif event["type"] == "message" and event["message"]["type"] == "text":
            text = event["message"]["text"].lower()
            if "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô" in text:
                reply_text(reply_token, "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 8:30 ‡∏ô. ‡∏Ñ‡πà‡∏∞")
            else:
                reply_text(reply_token, "‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞")
    return "OK", 200

# ====== 8. Run App ======
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    # ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô reloader ‡∏Ç‡∏≠‡∏á Flask ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ scheduler ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    app.run(host="0.0.0.0", port=port, use_reloader=False)